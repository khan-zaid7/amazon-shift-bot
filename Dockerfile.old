#### Multi stage file : 

# Stage 1: Build 
# FROM - specifies the base image 
# Alpine - is a lightweight version of linux 
FROM node:22-alpine AS build

WORKDIR /app

# Best Practice: Only copy the package.json and package-lock.json 
# why : if these files have'nt changed then docker will use the cached version 
COPY package*.json ./ 

# we use Run to execute a command on docker 
RUN npm ci 

# Clone the project in the /app directory 
COPY . .

# Expose 3000 : tells that application is using the port 3000
EXPOSE 3000 

# CMD : specifies the default command to run when the application starts 
CMD ["node", "src/server.js"]


# Stage 2 : Production 
# Docker produces the final build image from the last stage defined by default
# use target to use specific stage build 
# fresh clean base image 
# whenever docker see's FROM it starts with a new build 
FROM node:22-alpine

WORKDIR /app

# copy the node modules from the build stage 
# not re-installing the modules 
COPY --from=build /app/node_modules ./node_modules
COPY --from=build /app/package*.json ./

# copy the application source code from the 'build stage'
COPY --from=build /app/src ./src
COPY --from=build /app/knexfile.js ./
COPY --from=build /app/package*.json ./

# Expose the port that the app runs on 
EXPOSE 3000 

# The command to run the application 
CMD ["node", "src/server.js"]```
